{"version":3,"sources":["components/Nav.js","axios.js","Request.js","services.js","components/Banner.js","components/Row.js","components/HomeScreen.js","firebase.js","components/SignInScreen.js","components/Login.js","features/userSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","truncate","string","n","length","substr","Banner","movie","setMovie","a","get","request","data","results","Math","floor","random","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","name","overview","Row","title","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignInScreen","emailRef","useRef","passwordRef","ref","type","placeholder","onClick","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","Login","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","App","useSelector","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","email","exact","path","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2998991.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    const transitionNavBar = () => (window.scrollY > 100) ? handleShow(true) : handleShow(false)\n\n    useEffect(() => {\n        window.addEventListener('scroll', transitionNavBar)\n        return () => window.removeEventListener('scroll', transitionNavBar)\n    }, [])\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <div className=\"nav_content\">\n                <img className=\"nav_logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"netflix-logo\" />\n                <img className=\"nav_avatar\" src=\"https://cdn1.iconfinder.com/data/icons/avatars-and-biometry-data/154/add-create-web-avatar-person-data-512.png\" alt=\"avatar\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Nav\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL:\"https://api.themoviedb.org/3\",    \n})\nexport default instance;","const API_KEY = \"216fcca0938fc8d1fa790e409ad67f93\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;\n","const truncate = (string, n) => {\n    return string?.length > n ? string.substr(0, n - 1) + '...' : string;\n}\nexport default truncate","import React, { useState, useEffect } from 'react'\nimport axios from '../axios'\nimport requests from '../Request'\nimport \"./Banner.css\"\nimport truncate from \"../services\"\n\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n    useEffect(() => {\n        const fetchData = async () => {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]\n            )\n            return request;\n        }\n\n        fetchData()\n    }, [])\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"center center\"\n            }}>\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">{movie?.name}</h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n                <h1 className=\"banner_description\">{truncate(movie?.overview, 500)}</h1>\n            </div>\n            <div className=\"banner_fadeBottom\"></div>\n\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport axios from '../axios'\nimport \"./Row.css\"\nimport truncate from \"../services\"\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n    const [movies, setMovies] = useState([])\n    const base_url = \"https://image.tmdb.org/t/p/original/\"\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results)\n            return request\n        }\n        fetchData()\n    }, [fetchUrl])\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                    ((isLargeRow && movie.poster_path) || (!isLargeRow && movie.backdrop_path))\n                    && (\n                        <div className=\"poster\">\n                            <img\n                                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                                key={movie.id}\n                                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\n                                    }`}\n                                alt={movie.name} />\n                            <h3>{truncate((movie.name || movie.title), 20)}</h3>\n                        </div>\n                    )\n                )\n\n\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Row\n","import React from 'react'\nimport \"./HomeScreen.css\"\nimport Nav from \"./Nav\"\nimport Banner from \"./Banner\"\nimport Row from \"./Row\"\nimport requests from '../Request'\n\nfunction HomeScreen() {\n    return (\n        <div className=\"homeScreen\">\n            <Nav/>\n\n\n            <Banner/>\n\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} isLargeRow/>\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n            <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n\n        </div>\n    )\n}\n\nexport default HomeScreen\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBfR9GLIPXOiJpWVcV2GH7wvPOVxgmi3eo\",\n  authDomain: \"netflix-customized.firebaseapp.com\",\n  projectId: \"netflix-customized\",\n  storageBucket: \"netflix-customized.appspot.com\",\n  messagingSenderId: \"225768714805\",\n  appId: \"1:225768714805:web:f1c9ac77d3f74edf44377c\",\n  measurementId: \"G-0KV957RRF6\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth }\nexport default db;\n","import React, { useRef } from 'react'\nimport { auth } from '../firebase'\nimport './SignInScreen.css'\n\nfunction SignInScreen() {\n    const emailRef = useRef(null);\n    const passwordRef = useRef(null);\n\n    const register = (e) => {\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser) => {\n            console.log('authUser', authUser)\n        }).catch(error => alert(error.message))\n    }\n\n    const signIn = (e) => {\n        e.preventDefault()\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser) => {\n            console.log(authUser)\n        }).catch(error => alert(error.message))\n    }\n\n    return (\n        <div className=\"SignInScreen\">\n            <form>\n                <h1>Sign In</h1>\n                <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n                <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\n                <h4>\n                    <span className=\"SignInScreen_gray\">New to Netflix?</span>\n                    <span className=\"SignInScreen_link\" onClick={register}>Sign Up now.</span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignInScreen\n","import React, { useState } from 'react'\nimport './Login.css'\nimport SignInScreen from './SignInScreen'\n\nfunction Login() {\n    const [signIn, setSignIn] = useState(false);\n    return (\n        <div className=\"loginScreen\">\n            <div className=\"loginScreen_background\">\n                <img\n                    className=\"loginScreen_logo\"\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"netflix-logo\" />\n                <button\n                    className=\"loginScreen_button\"\n                    onClick={() => setSignIn(true)}>\n                    Sign In\n                </button>\n                <div className=\"loginScreen_gradient\"></div>\n            </div>\n            <div className=\"loginScreen_body\">\n                {signIn ? (\n                    <SignInScreen />\n                ) : (\n                        <>\n                            <h1>Unlimited films, TV programmes and more.</h1>\n                            <h2>Watch anywhere. Cancel at any time</h2>\n                            <h3>\n                                Ready to watch? Enter your email to\n                                create or restart your\n                                membership.\n                    </h3>\n                            <div className=\"loginScreen_input\">\n                                <form>\n                                    <input\n                                        type=\"email\"\n                                        placeholder=\"Email Adress\" />\n                                    <button\n                                        className=\"loginScreen_getStarted\"\n                                        onClick={() => setSignIn(true)}>\n                                        GET STARTED\n                                    </button>\n                                </form>\n                            </div>\n                        </>\n                    )}\n\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    // actions\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport HomeScreen from './components/HomeScreen'\r\nimport Login from './components/Login'\r\nimport { auth } from './firebase'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login, logout, selectUser } from './features/userSlice'\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        dispatch(login({\r\n          uid: userAuth.uid,\r\n          email: userAuth.email\r\n        }))\r\n      } else {\r\n        dispatch(logout)\r\n      }\r\n    })\r\n\r\n    return unsubscribe;\r\n\r\n  })\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <Router>\r\n        {!user ? (\r\n          <Login />\r\n        ) : (\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <HomeScreen />\r\n              </Route>\r\n            </Switch>\r\n          )}\r\n\r\n      </Router>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}